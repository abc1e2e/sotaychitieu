worker_processes 1;

# The second parameter determines the level of logging, and can be one of the following: debug, info, notice, warn, error, crit, alert, or emerg.
# Log levels above are listed in the order of increasing severity. Setting a certain log level will cause all messages of the specified and more severe log levels to be logged.
# For example, the default level error will cause error, crit, alert, and emerg messages to be logged. If this parameter is omitted then error is used.
error_log /dev/stderr error;

pid /run/nginx.pid;

events {
    worker_connections 32767;
}

http {
    include mime.types;
    default_type application/octet-stream;

    # Define custom log format to include reponse times
    log_format main_timed '[$time_iso8601] | $remote_user | $http_x_forwarded_for | $remote_addr | '
                          'REQUEST $request_method "$request_uri" $request_length bytes | $request_time s | '
                          'RESPONSE $status $body_bytes_sent bytes | "$http_referer" | "$http_user_agent"';

    access_log /dev/stdout main_timed;
    error_log /dev/stderr error;

    keepalive_timeout 65;

    # Write temporary files to /tmp so they can be created as a non-privileged user
    client_body_temp_path /tmp/client_temp;
    proxy_temp_path /tmp/proxy_temp_path;
    fastcgi_temp_path /tmp/fastcgi_temp;
    uwsgi_temp_path /tmp/uwsgi_temp;
    scgi_temp_path /tmp/scgi_temp;

    # default cache value if it is not set
    map $upstream_http_cache_control $custom_cache_control {
        "~."    $upstream_http_cache_control;
        default "max-age=3600";
    }

    # Default server definition
    server {
        listen [::]:8080 default_server;
        listen 8080 default_server;
        server_name _;

        sendfile off;

        root /var/www/public;

        more_set_headers "X-Frame-Options: SAMEORIGIN";
        more_set_headers "X-XSS-Protection: 1; mode=block";
        more_set_headers "X-Content-Type-Options: nosniff";

        # default cache value if it is not set
        more_set_headers "Cache-Control: $custom_cache_control";

        index index.php index.html index.htm;

        charset utf-8;
        client_max_body_size 256m;

        fastcgi_read_timeout 300s;

        port_in_redirect off;

        # Remove "index.php" from url
        if ($request_uri ~* "^(.*/)index\.php/?(.*)") {
           return 301 https://$host$1$2;
        }

        location /ping {
            auth_basic "off";
        }
        location /manifest.json {
            auth_basic "off";
        }
        location /favicon.ico {
            auth_basic "off";
            access_log off;
            log_not_found off;
            expires 1h;
        }
        location = /robots.txt  {
            auth_basic "off";
            access_log off;
            log_not_found off;
        }

        error_page 404 /index.php;

        # Redirect server error pages to the static page /50x.html
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /var/lib/nginx/html;
        }

        # Deny access to . files, for security
        location ~ /\. {
            # auth_basic "Private Area";
            # auth_basic_user_file /etc/nginx/.htpasswd;
            auth_basic "off";
            log_not_found off;
            deny all;
        }
        location ~ /\.(?!well-known).* {
            # auth_basic "Private Area";
            # auth_basic_user_file /etc/nginx/.htpasswd;
            auth_basic "off";
            deny all;
        }

        location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
            # auth_basic "Private Area";
            # auth_basic_user_file /etc/nginx/.htpasswd;
            auth_basic "off";
            expires 1h;
        }

        # Allow fpm ping and status from localhost
        location ~ ^/(fpm-status|fpm-ping)$ {
            access_log off;
            allow 127.0.0.1;
            deny all;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include fastcgi_params;
            fastcgi_pass 127.0.0.1:9000;
        }

        # Pass the PHP scripts to PHP-FPM listening on 127.0.0.1:9000
        location ~ \.php$ {
            # auth_basic "Private Area";
            # auth_basic_user_file /etc/nginx/.htpasswd;
            auth_basic "off";
            try_files $uri = 404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_read_timeout 300s;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param SCRIPT_NAME $fastcgi_script_name;
            fastcgi_index index.php;
            include fastcgi_params;
        }

        # for SNS verification
        location ~ ^/api/sns/(facebook|google|yahoo)/callback(/?)([?].*)$ {
            auth_basic "off";
            try_files $uri $uri/ /index.php?$query_string;
        }

        # for SMS result
        location ~ ^/media-sms/(ivr-)?results(/?)$ {
            auth_basic "off";
            try_files $uri $uri/ /index.php?$query_string;
        }

        # for upload company's images and videos
        location ~ ^/company/update-gallery-items(/?)$ {
            # auth_basic "Private Area";
            # auth_basic_user_file /etc/nginx/.htpasswd;
            auth_basic "off";
            client_max_body_size 256m;
            try_files $uri $uri/ /index.php?$query_string;
        }

        # for en-tenshoku
        # TODO limit by public IPs of en-tenshoku
        location ~ ^/api/(company_top_data|kuchikomi_data)(/?)$ {
            auth_basic "off";
            try_files $uri $uri/ /index.php?$query_string;
        }

        location ~ ^/admin(/?)$ {
            auth_basic "Private Area";
            auth_basic_user_file /etc/nginx/.htpasswd;
            try_files $uri $uri/ /index.php?$query_string;
        }

        location ^~ /content/ {
            auth_basic "off";
            resolver 8.8.8.8 valid=10s;
            proxy_set_header X-Forwarded-Host en-hyouban.com;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            set $backend en-lighthouse.hatenablog-oem.com;
            proxy_pass https://$backend;
            more_set_headers 'Access-Control-Allow-Origin: *';
            more_clear_headers 'X-Frame-Options';
        }

        location / {
            # auth_basic "Private Area";
            # auth_basic_user_file /etc/nginx/.htpasswd;
            auth_basic "off";
            try_files $uri $uri/ /index.php?$query_string;
        }
    }

    # Include other server configs
    include /etc/nginx/conf.d/*.conf;
}
